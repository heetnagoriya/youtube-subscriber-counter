import json
import requests
import os

YOUTUBE_API_KEY = os.environ['YOUTUBE_API_KEY']

def lambda_handler(event, context):
    try:
        params = event.get('queryStringParameters', {})
        input_value = params.get('username', '')

        base_url = "https://www.googleapis.com/youtube/v3/channels"

        if input_value.startswith('@'):
            username = input_value[1:]
            search_url = f"https://www.googleapis.com/youtube/v3/search?part=snippet&type=channel&q={username}&key={YOUTUBE_API_KEY}"
            search_resp = requests.get(search_url)
            search_data = search_resp.json()

            if not search_data['items']:
                return {'statusCode': 404, 'body': json.dumps({'error': 'Channel not found'})}

            channel_id = search_data['items'][0]['snippet']['channelId']
        elif input_value.startswith('UC'):
            channel_id = input_value
        else:
            url = f"{base_url}?part=statistics,snippet&forUsername={input_value}&key={YOUTUBE_API_KEY}"
            response = requests.get(url)
            data = response.json()
            if not data['items']:
                return {'statusCode': 404, 'body': json.dumps({'error': 'Channel not found'})}
            channel_id = data['items'][0]['id']

        final_url = f"{base_url}?part=snippet,statistics&id={channel_id}&key={YOUTUBE_API_KEY}"
        resp = requests.get(final_url)
        channel_data = resp.json()

        if not channel_data['items']:
            return {'statusCode': 404, 'body': json.dumps({'error': 'Channel not found'})}

        item = channel_data['items'][0]
        stats = item['statistics']
        snippet = item['snippet']

        return {
            'statusCode': 200,
            'body': json.dumps({
                'success': True,
                'subscriber_count': int(stats['subscriberCount']),
                'channel_title': snippet['title'],
                'thumbnail': snippet['thumbnails']['default']['url']
            }),
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': '*',
                'Content-Type': 'application/json'
            }
        }

    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)}),
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': '*',
                'Content-Type': 'application/json'
            }
        }
